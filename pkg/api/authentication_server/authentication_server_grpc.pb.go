// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: authentication_server/authentication_server.proto

package authentication_server

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuthenticationServerClient is the client API for AuthenticationServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthenticationServerClient interface {
	// RegisterUser registers new user
	RegisterUser(ctx context.Context, in *RegisterUserRequest, opts ...grpc.CallOption) (*RegisterUserResponse, error)
	AuthenticateUser(ctx context.Context, in *AuthenticateUserRequest, opts ...grpc.CallOption) (*AuthenticateUserResponse, error)
}

type authenticationServerClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthenticationServerClient(cc grpc.ClientConnInterface) AuthenticationServerClient {
	return &authenticationServerClient{cc}
}

func (c *authenticationServerClient) RegisterUser(ctx context.Context, in *RegisterUserRequest, opts ...grpc.CallOption) (*RegisterUserResponse, error) {
	out := new(RegisterUserResponse)
	err := c.cc.Invoke(ctx, "/authentication_server.AuthenticationServer/RegisterUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationServerClient) AuthenticateUser(ctx context.Context, in *AuthenticateUserRequest, opts ...grpc.CallOption) (*AuthenticateUserResponse, error) {
	out := new(AuthenticateUserResponse)
	err := c.cc.Invoke(ctx, "/authentication_server.AuthenticationServer/AuthenticateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthenticationServerServer is the server API for AuthenticationServer service.
// All implementations must embed UnimplementedAuthenticationServerServer
// for forward compatibility
type AuthenticationServerServer interface {
	// RegisterUser registers new user
	RegisterUser(context.Context, *RegisterUserRequest) (*RegisterUserResponse, error)
	AuthenticateUser(context.Context, *AuthenticateUserRequest) (*AuthenticateUserResponse, error)
	mustEmbedUnimplementedAuthenticationServerServer()
}

// UnimplementedAuthenticationServerServer must be embedded to have forward compatible implementations.
type UnimplementedAuthenticationServerServer struct {
}

func (UnimplementedAuthenticationServerServer) RegisterUser(context.Context, *RegisterUserRequest) (*RegisterUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterUser not implemented")
}
func (UnimplementedAuthenticationServerServer) AuthenticateUser(context.Context, *AuthenticateUserRequest) (*AuthenticateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthenticateUser not implemented")
}
func (UnimplementedAuthenticationServerServer) mustEmbedUnimplementedAuthenticationServerServer() {}

// UnsafeAuthenticationServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthenticationServerServer will
// result in compilation errors.
type UnsafeAuthenticationServerServer interface {
	mustEmbedUnimplementedAuthenticationServerServer()
}

func RegisterAuthenticationServerServer(s grpc.ServiceRegistrar, srv AuthenticationServerServer) {
	s.RegisterService(&AuthenticationServer_ServiceDesc, srv)
}

func _AuthenticationServer_RegisterUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServerServer).RegisterUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authentication_server.AuthenticationServer/RegisterUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServerServer).RegisterUser(ctx, req.(*RegisterUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticationServer_AuthenticateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServerServer).AuthenticateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authentication_server.AuthenticationServer/AuthenticateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServerServer).AuthenticateUser(ctx, req.(*AuthenticateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthenticationServer_ServiceDesc is the grpc.ServiceDesc for AuthenticationServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthenticationServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "authentication_server.AuthenticationServer",
	HandlerType: (*AuthenticationServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterUser",
			Handler:    _AuthenticationServer_RegisterUser_Handler,
		},
		{
			MethodName: "AuthenticateUser",
			Handler:    _AuthenticationServer_AuthenticateUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "authentication_server/authentication_server.proto",
}
