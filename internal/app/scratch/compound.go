package scratch

import (
	"context"
	"log"

	"github.com/grpc-ecosystem/grpc-gateway/v2/runtime"
	"google.golang.org/grpc"
)

type CompoundServiceDesc struct {
	svc []ServiceDesc
}

func NewCompoundServiceDesc(desc ...ServiceDesc) *CompoundServiceDesc {
	return &CompoundServiceDesc{
		svc: desc,
	}
}

// RegisterGRPC implements service registrator interface.
func (d *CompoundServiceDesc) RegisterGRPC(g *grpc.Server) {
	for _, svc := range d.svc {
		svc.RegisterGRPC(g)
	}
}

// RegisterGateway registers this service's HTTP handlers/bindings generated by grpc-gateway
func (d *CompoundServiceDesc) RegisterGateway(ctx context.Context, mux *runtime.ServeMux) error {
	for _, svc := range d.svc {
		if err := svc.RegisterGateway(ctx, mux); err != nil {
			log.Println(err.Error())
		}
	}

	return nil
}

func (d *CompoundServiceDesc) SwaggerDef() []byte {
	j := swagJoiner{}

	for _, svc := range d.svc {
		if err := j.AddDefinition(svc.SwaggerDef()); err != nil {
			log.Printf("err joining swaggers: %s\n", err.Error())
		}
	}

	return j.SumDefinitions()
}
