//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Tokens = newTokensTable("public", "tokens", "")

type tokensTable struct {
	postgres.Table

	// Columns
	AccessToken  postgres.ColumnString
	Type         postgres.ColumnString
	CreatedAt    postgres.ColumnTimestampz
	ExpiresIn    postgres.ColumnInteger
	RefreshToken postgres.ColumnString
	Scope        postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type TokensTable struct {
	tokensTable

	EXCLUDED tokensTable
}

// AS creates new TokensTable with assigned alias
func (a TokensTable) AS(alias string) *TokensTable {
	return newTokensTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new TokensTable with assigned schema name
func (a TokensTable) FromSchema(schemaName string) *TokensTable {
	return newTokensTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new TokensTable with assigned table prefix
func (a TokensTable) WithPrefix(prefix string) *TokensTable {
	return newTokensTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new TokensTable with assigned table suffix
func (a TokensTable) WithSuffix(suffix string) *TokensTable {
	return newTokensTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newTokensTable(schemaName, tableName, alias string) *TokensTable {
	return &TokensTable{
		tokensTable: newTokensTableImpl(schemaName, tableName, alias),
		EXCLUDED:    newTokensTableImpl("", "excluded", ""),
	}
}

func newTokensTableImpl(schemaName, tableName, alias string) tokensTable {
	var (
		AccessTokenColumn  = postgres.StringColumn("access_token")
		TypeColumn         = postgres.StringColumn("type")
		CreatedAtColumn    = postgres.TimestampzColumn("created_at")
		ExpiresInColumn    = postgres.IntegerColumn("expires_in")
		RefreshTokenColumn = postgres.StringColumn("refresh_token")
		ScopeColumn        = postgres.StringColumn("scope")
		allColumns         = postgres.ColumnList{AccessTokenColumn, TypeColumn, CreatedAtColumn, ExpiresInColumn, RefreshTokenColumn, ScopeColumn}
		mutableColumns     = postgres.ColumnList{TypeColumn, CreatedAtColumn, ExpiresInColumn, RefreshTokenColumn, ScopeColumn}
	)

	return tokensTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		AccessToken:  AccessTokenColumn,
		Type:         TypeColumn,
		CreatedAt:    CreatedAtColumn,
		ExpiresIn:    ExpiresInColumn,
		RefreshToken: RefreshTokenColumn,
		Scope:        ScopeColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
